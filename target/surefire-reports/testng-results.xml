<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="1" failed="1" total="6" passed="4">
  <reporter-output>
  </reporter-output>
  <suite name="测试套件" duration-ms="36" started-at="2017-03-10T07:52:25Z" finished-at="2017-03-10T07:52:25Z">
    <groups>
    </groups>
    <test name="test_module1" duration-ms="36" started-at="2017-03-10T07:52:25Z" finished-at="2017-03-10T07:52:25Z">
      <class name="com.vdrips.testcase.TestA">
        <test-method status="PASS" signature="beforeClass(java.lang.String, java.lang.String)[pri:0, instance:com.vdrips.testcase.TestA@7d417077]" name="beforeClass" is-config="true" duration-ms="8" started-at="2017-03-10T15:52:25Z" finished-at="2017-03-10T15:52:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[firefox]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[test]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:com.vdrips.testcase.TestA@7d417077]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2017-03-10T15:52:25Z" finished-at="2017-03-10T15:52:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="dependsMethod()[pri:0, instance:com.vdrips.testcase.TestA@7d417077]" name="dependsMethod" duration-ms="0" started-at="2017-03-10T15:52:25Z" description="A类测试方法 parentMethod/skipMethod的依赖函数" finished-at="2017-03-10T15:52:25Z">
          <exception class="java.lang.Exception">
            <message>
              <![CDATA[dependsMethod Exception]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Exception: dependsMethod Exception
	at com.vdrips.testcase.TestA.dependsMethod(TestA.java:61)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:643)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:820)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1128)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:74)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:93)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:145)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:87)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Exception -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dependsMethod -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:com.vdrips.testcase.TestA@7d417077]" name="afterMethod" is-config="true" duration-ms="0" started-at="2017-03-10T15:52:25Z" finished-at="2017-03-10T15:52:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="verifyData(java.lang.String, java.lang.Integer)[pri:0, instance:com.vdrips.testcase.TestA@7d417077]" name="verifyData" duration-ms="0" started-at="2017-03-10T15:52:25Z" description="A类测试方法 数据提供器" data-provider="provide_data" finished-at="2017-03-10T15:52:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Cedric]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[36]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyData -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:com.vdrips.testcase.TestA@7d417077]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2017-03-10T15:52:25Z" finished-at="2017-03-10T15:52:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:com.vdrips.testcase.TestA@7d417077]" name="afterMethod" is-config="true" duration-ms="0" started-at="2017-03-10T15:52:25Z" finished-at="2017-03-10T15:52:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:com.vdrips.testcase.TestA@7d417077]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2017-03-10T15:52:25Z" finished-at="2017-03-10T15:52:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyData(java.lang.String, java.lang.Integer)[pri:0, instance:com.vdrips.testcase.TestA@7d417077]" name="verifyData" duration-ms="1" started-at="2017-03-10T15:52:25Z" description="A类测试方法 数据提供器" data-provider="provide_data" finished-at="2017-03-10T15:52:25Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Anne]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[37]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyData -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:com.vdrips.testcase.TestA@7d417077]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2017-03-10T15:52:25Z" finished-at="2017-03-10T15:52:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:com.vdrips.testcase.TestA@7d417077]" name="afterMethod" is-config="true" duration-ms="0" started-at="2017-03-10T15:52:25Z" finished-at="2017-03-10T15:52:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="test1()[pri:1, instance:com.vdrips.testcase.TestA@7d417077]" name="test1" duration-ms="0" started-at="2017-03-10T15:52:25Z" description="A类测试方法1" finished-at="2017-03-10T15:52:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test1 -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:com.vdrips.testcase.TestA@7d417077]" name="afterMethod" is-config="true" duration-ms="1" started-at="2017-03-10T15:52:25Z" finished-at="2017-03-10T15:52:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="SKIP" signature="method()[pri:0, instance:com.vdrips.testcase.TestA@7d417077]" name="method" duration-ms="0" started-at="2017-03-10T15:52:25Z" description="A类测试方法parentMethod" depends-on-methods="com.vdrips.testcase.TestA.dependsMethod" finished-at="2017-03-10T15:52:25Z">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method TestA.method()[pri:0, instance:com.vdrips.testcase.TestA@7d417077] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method TestA.method()[pri:0, instance:com.vdrips.testcase.TestA@7d417077] depends on not successfully finished methods
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1037)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:74)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:93)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)
	at com.sun.proxy.$Proxy0.invoke(Unknown Source)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:145)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:87)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- method -->
        <test-method status="PASS" signature="afterMethod()[pri:0, instance:com.vdrips.testcase.TestA@7d417077]" name="afterMethod" is-config="true" duration-ms="1" started-at="2017-03-10T15:52:25Z" finished-at="2017-03-10T15:52:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod()[pri:0, instance:com.vdrips.testcase.TestA@7d417077]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2017-03-10T15:52:25Z" finished-at="2017-03-10T15:52:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="skipMethod()[pri:0, instance:com.vdrips.testcase.TestA@7d417077]" name="skipMethod" duration-ms="0" started-at="2017-03-10T15:52:25Z" description="A类测试方法skipMethod" depends-on-methods="com.vdrips.testcase.TestA.dependsMethod" finished-at="2017-03-10T15:52:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- skipMethod -->
        <test-method status="PASS" signature="afterClass()[pri:0, instance:com.vdrips.testcase.TestA@7d417077]" name="afterClass" is-config="true" duration-ms="0" started-at="2017-03-10T15:52:25Z" finished-at="2017-03-10T15:52:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass -->
      </class> <!-- com.vdrips.testcase.TestA -->
    </test> <!-- test_module1 -->
  </suite> <!-- 测试套件 -->
</testng-results>
